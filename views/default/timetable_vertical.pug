- let columnCount = timetable.stops.length;
- if (config.showStopCity) {
-   columnCount += timetable.stops.reduce((memo, stop, index) => {
-     if (index === 0 || stop.stop_city !== timetable.stops[index - 1].stop_city) {
-       memo += 1;
-     }
-     return memo;
-   }, 0);
- }
- const timetableHasTripNotes = timetable.orderedTrips.flatMap(trip => getNotesForTrip(timetable.notes, trip)).length > 0;
.table-container
  table.table-vertical(summary=`This table shows schedules for a selection of key stops on the route for ${timetable.timetable_label} ${timetable.dayList}.  Stops and their schedule times are listed in the columns.` data-orientation="vertical")
    caption.sr-only= `${timetable.timetable_label} | ${timetable.dayList}`
    colgroup
      each stop, idx in timetable.stops
        col(id=`stop_id_${formatHtmlId(stop.stop_id)}` class=`stop-${idx}` data-stop-id=`${stop.stop_id}` data-is-timepoint=`${stop.is_timepoint}`)
    thead
      tr
        if timetableHasTripNotes || timetable.routes.length > 1
          th
        if timetable.has_continues_from_route
          th.stop-header.continues-from Continues from route

        - let previousCity = null;
        each stop, idx in timetable.stops
          if stop.stop_city !== '' && previousCity !== stop.stop_city && config.showStopCity
            th.city-column= stop.stop_city
            - previousCity = stop.stop_city

          th.stop-header(scope="col" width=`${(100 / columnCount).toFixed(2)}%`)
            include timetable_stop_name.pug

        if timetable.has_continues_as_route
          th.stop-header.continues-as Continues as route

    tbody
      if timetable.frequencies && !timetable.frequencyExactTimes
        tr.trip-row
          if timetableHasTripNotes || timetable.routes.length > 1
            td
          if timetable.has_continues_from_route
            td

          td.trip-frequency(colspan=`${columnCount}`)!= formatFrequencyWarning(timetable.frequencies)
            
          if timetable.has_continues_as_route
            td
      each trip, idx in timetable.orderedTrips
        tr.trip-row(id=`trip_id_${formatHtmlId(trip.trip_id)}`)
          if timetableHasTripNotes || timetable.routes.length > 1
            td.trip-notes
              .trip-name= formatTripName(trip, idx, timetable)
              each note in getNotesForTrip(timetable.notes, trip)
                include timetable_note_symbol.pug
          if timetable.has_continues_from_route
            include timetable_continuation_from.pug

          - let previousCity = null;
          each stop in timetable.stops
            if stop.stop_city !== '' && previousCity !== stop.stop_city && config.showStopCity
              td
              - previousCity = stop.stop_city

            - stoptime = stop.trips[idx]
            include timetable_stoptime.pug

          if timetable.has_continues_as_route
            include timetable_continuation_as.pug
