.table-container
  table.table-hourly(summary=`This table shows schedules for a selection of key stops on the route for ${timetable.timetable_label} ${timetable.dayList}. Schedule times are listed in rows, starting with the stop name in the first cell of the row and the minutes after the hour in the second row.` data-orientation="hourly")
    caption.sr-only= `${timetable.timetable_label} | ${timetable.dayList}`
    thead
      tr
        th.stop-header(scope="col") Stop
        th(scope="col") Minutes after the hour

    tbody
      if timetable.frequencies && !timetable.frequencyExactTimes
        tr.trip-row
          td.trip-frequency(colspan="2")!= formatFrequencyWarning(timetable.frequencies)
      - let previousCity
      each stop in timetable.stops
        if previousCity !== stop.stop_city && config.showStopCity
          tr.city-row
            th(scope="row" colspan="2")= stop.stop_city
        - previousCity = stop.stop_city

        tr.stop-row(id=`stop_id_${formatHtmlId(stop.stop_id)}` data-stop-id=`${stop.stop_id}`)
          th.stop-name-container(scope="row")
            include timetable_stop_name.pug

          td.stop-time= stop.hourlyTimes.join(', ')

- const firstStop = timetable.stops[0]
- const firstTripStartTime = firstStop.trips[0]
- const lastStop = timetable.stops[timetable.stops.length - 1]
- const lastTripEndTime = lastStop.trips[lastStop.trips.length - 1]
.table-hourly-notes!= `Service begins at ${firstStop.stop_name} at ${firstTripStartTime.formatted_time} and ends at ${lastStop.stop_name} at ${lastTripEndTime.formatted_time}.`
